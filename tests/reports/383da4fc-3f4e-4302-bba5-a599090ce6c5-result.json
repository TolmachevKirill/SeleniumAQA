{"name": "test_bank_operations", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_bank_operations.TestBankOperations object at 0x000001E1FE0D5CA0>\nsetup_pages = (<pages.login_page.LoginPage object at 0x000001E1FE0D6E10>, <pages.account_page.AccountPage object at 0x000001E1FE0D6570>, <pages.transactions_page.TransactionsPage object at 0x000001E1FE0D7E60>)\n\n    def test_bank_operations(self, setup_pages):\n        login_page, account_page, transactions_page = setup_pages\n    \n        # Авторизация пользователя \"Harry Potter\"\n        login_page.login_as_user(\"Harry Potter\")\n    \n        # Вычисление N-го числа Фибоначчи\n        fib_number = calculate_fibonacci(date.today().day + 1)\n    \n        # Пополнение счета на сумму, равную N-му числу Фибоначчи\n        account_page.deposit(fib_number)\n    \n        # Списание со счета на ту же сумму\n>       account_page.withdraw(fib_number)\n\ntest_bank_operations.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\account_page.py:33: in withdraw\n    WebDriverWait(self.driver, self.timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"bebf383efe7f6a81b6420f10d0294cc8\")>\nmethod = <function text_to_be_present_in_element_value.<locals>._predicate at 0x000001E1FE0DE480>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "start": 1715353389040, "stop": 1715353426494, "uuid": "80f50e74-6e27-47b4-85a9-e3e14dfe2630", "historyId": "3c20184b1f0f423149f775983a76d9f7", "testCaseId": "3c20184b1f0f423149f775983a76d9f7", "fullName": "tests.test_bank_operations.TestBankOperations#test_bank_operations", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup_pages')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_bank_operations"}, {"name": "subSuite", "value": "TestBankOperations"}, {"name": "host", "value": "Selenium"}, {"name": "thread", "value": "10212-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_bank_operations"}]}